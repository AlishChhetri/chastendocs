{"title":"Chasten Documentation","markdown":{"yaml":{"title":"Chasten Documentation","subtitle":"Welcome! This is the official documentation for Chasten.","format":"html"},"headingText":"üéâ Introduction","containsRefs":false,"markdown":"\n\n[<img src=\"chasten-logo.svg\" alt=\"Chasten Logo\"\n    title=\"Chasten Logo\" />](https://github.com/AstuteSource/chasten)\n\n\n[![build](https://github.com/gkapfham/chasten/actions/workflows/build.yml/badge.svg)](https://github.com/gkapfham/chasten/actions/workflows/build.yml)\n![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/gkapfham/5300aa276fa9261b2b21b96c3141b3ad/raw/covbadge.json)\n[![Language:\nPython](https://img.shields.io/badge/Language-Python-blue.svg)](https://github.com/gkapfham/chasten/search?l=python)\n[![Code Style: black](https://img.shields.io/badge/Code%20Style-Black-blue.svg)](https://github.com/psf/black)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-Yes-blue.svg)](https://github.com/gkapfham/chasten/graphs/commit-activity)\n[![License LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0)\n\n\n- **Chasten** is a Python program that uses\n[XPath](https://www.w3schools.com/xml/xpath_syntax.asp) expressions to find\npatterns in the [abstract syntax\ntree](https://docs.python.org/3/library/ast.html) (AST) of a Python program. You\ncan use Chasten to quickly implement your own configurable linting rules,\nwithout having to use a complex AST analysis framework or resorting to imprecise\nregular expressions.\n\n- Do you want to ensure that a Python program has does not have any\ntriple-nested `for` loops inside of `async` functions? Or, do you want to\nconfirm that every function inside your Python program has type annotations and\na docstring comment? **Chasten can help**! It allows you to express these checks\n&mdash; and many other types of analyses as well &mdash; in simple YAML files\nthat contain XPath expressions.\n\n## üòÇ Definitions\n\n- **chasten** (transitive verb) \"to make someone aware of failure or of having\ndone something wrong\", [Cambridge\nDictionary](https://dictionary.cambridge.org/us/dictionary/english/chasten).\n    - **Example Sentence**: \"Her remarks are a gift to me even as they chasten\n    and redirect my efforts to expand the arguments of this book into a larger\n    one.\", [Cambridge English\n    Corpus](https://www.cambridge.org/gb/cambridgeenglish/better-learning-insights/corpus)\n\n- **chasten** (uncountable or singular noun) \"a tool that analyzes the abstract\nsyntax tree of a Python program to detect potential sources of programmer\nmistakes so as to prevent program failure\", [AstuteSource\nDevelopers](https://github.com/AstuteSource).\n    - **Student Sentence**: \"I'm glad that `chasten` reminded me to add\n    docstrings and type annotations to all of the functions in `main.py`. It was\n    easy to see what to fix!\"\n    - **Instructor Sentence**: \"`chasten` makes it easy for me to reliably\n    confirm that student programs have the required coding constructs. It's much\n    better than using regular expressions!\"\n    - **Developer Sentence**: \"Since I was already familiar with XPath\n    expressions, `chasten` made it fun and easy for me to do an automate\n    analysis of a Python codebase that I maintain.\"\n    - **Researcher Sentence**: \"In addition to helping me quickly scan the\n    source code of Python projects, `chasten`'s analysis dashboard lets me\n    effectively explore the data I collect.\"\n\n## üîãFeatures\n\n- ‚ú® Easy-to-configure, automated analysis of a Python program's abstract syntax tree\n- üìÉ Flexible and easy-to-use YAML-based configuration file for describing analyses and checks\n- ü™Ç Automated generation and verification of the YAML configuration files for an analysis\n- üöÄ Configurable saving of analysis results in the JSON, CSV, or SQLite formats\n- üöß Automated integration of result files that arise from multiple runs of the tool\n- üåÑ Interactive results analysis through the use of a locally running datasette server\n- üåé Automated deployment of a datasette server on platforms like Fly or Vercel\n- ü¶ö Detailed console and syslog logging to furnish insights into the tool's behavior\n- üí† Rich command-line interface with robust verification of arguments and options\n- ü§Ø Interactive command-line generation through an easy-to-use terminal user interface\n\n## ‚ö°Ô∏è Requirements\n\n- Python 3.11\n- Chasten leverages numerous Python packages, including notable ones such as:\n    - [Datasette](https://github.com/simonw/datasette): Interactive data analysis dashboards\n    - [Pyastgrep](https://github.com/spookylukey/pyastgrep): XPath-based analysis of a Python program's AST\n    - [Pydantic](https://github.com/pydantic/pydantic): Automated generation and validation of configuration files\n    - [Rich](https://github.com/Textualize/rich): Full-featured formatting and display of text in the terminal\n    - [Trogon](https://github.com/Textualize/trogon): Automated generation of terminal user interfaces for a command-line tool\n    - [Typer](https://github.com/tiangolo/typer): Easy-to-implement and fun-to-use command-line interfaces\n- The developers of Chasten use [Poetry](https://github.com/python-poetry/poetry) for packaging and dependency management\n\n## üîΩ Installation\n\nFollow these steps to install the `chasten` program:\n\n- Install Python 3.11 for your operating system\n- Install [pipx](https://github.com/pypa/pipx) to support program installation in isolated environments\n- Type `pipx install chasten` to install Chasten\n- Type `pipx list` and confirm that Chasten is installed\n- Type `chasten --help` to learn how to use the tool\n\n## ü™Ç Configuration\n\nYou can configure `chasten` with two YAML files, normally called `config.yml`\nand `checks.yml`. Although `chasten` can generate a starting configuration, you\ncan check out the üì¶\n[AstuteSource/chasten-configuration](https://github.com/AstuteSource/chasten-configuration)\nrepository for example(s) of configuration files that setup the tool. Although\nthe `config.yml` file can reference multiple check configuration files, this\nexample shows how to specify a single `checks.yml` file:\n\n```yml\n# chasten configuration\nchasten:\n  # point to a single checks file\n  checks-file:\n    - checks.yml\n```\n\nThe `checks.yml` file must contain one or more checks. What follows is an\nexample of a check configuration file with two checks that respectively find the\nfirst executable line of non-test and test-case functions in a Python project.\nNote that the `pattern` attribute specifies the XPath version 2.0 expression\nthat `chasten` will use to detect the specified type of Python function. You can\ntype `chasten configure validate --config <path to chasten-configuration/\ndirectory>` after filling in `<path to chasten-configuration>` with the\nfully-qualified name of your configuration directory and the tool will confirm\nthat your configuration meets the tool's specification. You can also use the\ncommand `chasten configure create` command to automatically generate a starting\nconfiguration! Typing `chasten configure --help` will explain how to configure\nthe tool.\n\n```yml\nchecks:\n  - name: \"all-non-test-function-definition\"\n    code: \"FUNC\"\n    id: \"FUNC001\"\n    description: \"First executable line of a non-test function, skipping over docstrings and/or comments\"\n    pattern: '//FunctionDef[not(contains(@name, \"test_\"))]/body/Expr[value/Constant]/following-sibling::*[1] | //FunctionDef[not(contains(@name, \"test_\"))]/body[not(Expr/value/Constant)]/*[1]'\n  - name: \"all-test-function-definition\"\n    code: \"FUNC\"\n    id: \"FUNC002\"\n    description: \"First executable line of a test function, skipping over docstrings and/or comments\"\n    pattern: '//FunctionDef[starts-with(@name, \"test_\")]/body/Expr[value/Constant]/following-sibling::*[1] | //AsyncFunctionDef[starts-with(@name, \"test_\")]/body/Expr[value/Constant]/following-sibling::*[1] | //FunctionDef[starts-with(@name, \"test_\")]/body[not(Expr/value/Constant)]/*[1] | //AsyncFunctionDef[starts-with(@name, \"test_\")]/body[not(Expr/value/Constant)]/*[1]'\n    count:\n      min: 1\n      max: 10\n```\n\n## ‚ú® Analysis\n\nSince `chasten` needs a project with Python source code as the input to its\n`analysis` sub-command, you can clone the\nüì¶ [AstuteSource/lazytracker](https://github.com/AstuteSource/lazytracker) and\nüì¶ [AstuteSource/multicounter](https://github.com/AstuteSource/multicounter)\nrepositories that are forks of existing Python projects created for convenient\nanalysis. To incrementally analyze these two projects with `chasten`, you can\ntype the following commands to produce a results JSON file for each project:\n\n- After creating a `subject-data/` directory that contains a `lazytracker/`\ndirectory, you can run the `chasten analyze` command for the `lazytracker`\nprogram:\n\n```shell\nchasten analyze lazytracker \\\n        --config <path to the chasten-configuration/ directory> \\\n        --search-path <path to the lazytracker/ directory> \\\n        --save-directory <path to the subject-data/lazytracker/ directory> \\\n        --save\n ```\n\n- Now you can scan the output to confirm that, for instance, `chasten` finds `6`\ntest functions in the `lazytracker` project. If you look in the\n`subject-data/lazytracker` directory you will find a JSON file with a name like\n`chasten-results-lazytracker-20230823162341-4c23fc443a6b4c4aa09886f1ecb96e9f.json`.\nRunning `chasten` on this program more than once will produce a new results file\nwith a different timestamp (i.e., `20230823162341`) and unique identifier (i.e.,\n`4c23fc443a6b4c4aa09886f1ecb96e9f`) in its name, thus ensuring that you do not\naccidentally write over your prior results when using `--save`.\n\n- After creating a `multicounter/` directory in the existing `subject-data/`\ndirectory, you can run the `chasten analyze` command for the `multicounter`\nprogram:\n\n```shell\nchasten analyze multicounter \\\n        --config <path to the chasten-configuration/ directory> \\\n        --search-path <path to the multicounter/ directory> \\\n        --save-directory <path to the subject-data/lazytracker/ directory> \\\n        --save\n ```\n\n- Now you can scan the output to confirm that, as an example, `chasten` finds\n`10` test functions in the `multicounter` project. If you look in the\n`subject-data/lazytracker` directory you will find a JSON file with a name like\n`chasten-results-multicounter-20230821171712-5c52f2f1b61b4cce97624cc34cb39d4f.json`\nand name components that are similar to the JSON file created for the\n`multicounter` program.\n\n- Since the `all-test-function-definition` check specifies that the program must\nhave between `1` and `10` tests you will notice that this check passes for both\n`lazytracker` and `multicounter`. This means that `chasten` returns a `0` error\ncode to communicate to your operating system that the check passed.\n\n- You can learn more about how to use the `analyze` sub-command by typing\n`chasten analyze --help`. For instance, `chasten` supports the `--check-include`\nand `--check-exclude` options that allow you to respectively include and exclude\nspecific checks according to fuzzy matching rules that you can specify for any\nof a check's attributes specified in the `checks.yml` file.\n\n## üöß Integration\n\nAfter running `chasten` on the `lazytracker` and `multicounter` programs you can\nintegrate their individual JSON files into a single JSON file, related CSV\nfiles, and a SQLite database. Once you have made an `integrated-data/`\ndirectory, you can type this command to perform the integration:\n\n```shell\nchasten integrate all-programs \\\n        <path to subject-data>/**/*.json \\\n        --save-directory <path to the integrated-data/ directory>\n```\n\nThis command will produce a directory like\n`chasten-flattened-csvs-sqlite-db-all-programs-20230823171016-2061b524276b4299b04359ba30452923/`\nthat contains a SQLite database called `chasten.db` and a `csv/` directory with\nCSV files that correspond to each of the tables inside of the database.\n\nYou can learn more about the `integrate` sub-command by typing `chasten\nintegrate --help`.\n\n## üåÑ Results\n\nIf you want to create an interactive analysis dashboard that uses üì¶\n[simonw/datasette](https://github.com/simonw/datasette) you can run `chasten\ndatasette-serve <path containing integrated results>/chasten.db --port 8001`.\nNow you can use the dashboard in your web browser to analyze the results while\nyou study the source code for these projects with your editor! Examining the\nresults will reveal that `chasten`, through its use of üì¶\n[spookylukey/pyastgrep](https://github.com/spookylukey/pyastgrep), correctly\nuses the XPath expression for `all-test-function-definition` to find the first\nline of executable source code inside of each test, skipping over a function's\ndocstring and leading comments.\n\nFor the `lazytracker` program you will notice that `chasten` reports that there\nare `6` test cases even though `pytest` only finds and runs `5` tests. This is\ndue to the fact that `tests/test_tracked.py` test suite in `lazytracker`\ncontains a function starting with `test_` inside of another function starting\nwith `test_`. This example illustrates the limitations of static analysis with\n`chasten`! Even though the tool correctly detected all of the \"test functions\",\nthe nesting of the functions in the test suite means that `pytest` will run the\nouter `test_` function and use the inner `test_` function for testing purposes.\n\nWith that said, `chasten` correctly finds each of the tests for the\n`multicounter` project. You can follow each of the previous steps in this\ndocument to apply `chasten` to your own Python program!\n\n## üåé Deployment\n\nIf you want to make your `chasten.db` publicly available for everyone to study,\nyou can use the `chasten datasette-publish` sub-command. As long as you have\nfollowed the installation instructions for üì¶\n[simonw/datasette-publish-fly](https://github.com/simonw/datasette-publish-fly)\nand üì¶\n[simonw/datasette-publish-vercel](https://github.com/simonw/datasette-publish-vercel),\nyou can use the plugins to deploy a public `datasette` server that hosts your\n`chasten.db`. For instance, running the command `chasten datasette-publish <path\ncontaining integrated results>/chasten.db --platform vercel` will publish the\nresults from running `chasten` on `lazytracker` and `multicounter` to the\n[Vercel](https://vercel.com/) platform.\n\nImportantly, the use of the `chasten datasette-publish` command with the\n`--platform vercel` option requires you to have previously followed the\ninstructions for the `datasette-publish-vercel` plugin to install the `vercel`\ncommand-line tool. This is necessary because, although\n`datasette-publish-vercel` is one of `chasten`'s dependencies neither `chasten`\nnor `datasette-publish-vercel` provide the `vercel` tool even though they use\nit. You must take similar steps before publishing your database to\n[Fly](https://fly.io/)!\n\n## ü§Ø Interaction\n\nEven though `chasten` is a command-line application, you create interactively\ncreate the tool's command-line arguments and options through a terminal user\ninterface (TUI). To use TUI-based way to create a complete command-line for\n`chasten` you can type the command `chasten interact`.\n\n## ü§ó Learning\n\n- **Curious about the nodes that are available in a Python program's AST?**\n    - [Abstract Syntax Tree\n    documentation](https://docs.python.org/3/library/ast.html) introduces the\n    nodes of a Python AST\n    - [Green Tea\n    Snakes](https://greentreesnakes.readthedocs.io/en/latest/index.html)\n    provides the \"missing Python AST docs\"\n    - [Textual AST View](https://github.com/davep/textual-astview) provides a\n    terminal-based tool for browsing a Python program's AST\n- **Want to learn more about how to write XPath expressions for a Python AST?**\n    - [Pyastgrep](https://github.com/spookylukey/pyastgrep) offers examples of\n    XPath expressions for querying a Python program's AST\n    - [XPath Documentation](https://www.w3schools.com/xml/xpath_syntax.asp)\n    describes how to write XPath expressions\n    - [XPath Axes](https://www.w3schools.com/xml/xpath_axes.asp) summaries the\n    ways that XPath axes relate a note to other nodes\n- **Interested in exploring other approaches to querying source code?**\n    - [srcML](https://www.srcml.org/) supports XPath-based querying of programs\n    implemented in C, C#, C++, and Java\n    - [Treesitter](https://tree-sitter.github.io/tree-sitter/) provides a\n    general-purpose approach to modelling and querying source code\n    - [Python Treesitter](https://github.com/tree-sitter/py-tree-sitter) offers\n    a Python language bindings for to parsing and querying with Treesitter\n\n## üßóImprovement\n\n- Found a bug or have a feature that the development team should implement?\n[Raise an issue](https://github.com/AstuteSource/chasten/issues)!\n- Interesting in learning more about tool usage details? [Check the\nwiki](https://github.com/AstuteSource/chasten/wiki)!\n- Want to discuss ways to use the tool? [Participate in\ndiscussions](https://github.com/AstuteSource/chasten/discussions/2)!\n","srcMarkdownNoYaml":"\n\n[<img src=\"chasten-logo.svg\" alt=\"Chasten Logo\"\n    title=\"Chasten Logo\" />](https://github.com/AstuteSource/chasten)\n\n\n[![build](https://github.com/gkapfham/chasten/actions/workflows/build.yml/badge.svg)](https://github.com/gkapfham/chasten/actions/workflows/build.yml)\n![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/gkapfham/5300aa276fa9261b2b21b96c3141b3ad/raw/covbadge.json)\n[![Language:\nPython](https://img.shields.io/badge/Language-Python-blue.svg)](https://github.com/gkapfham/chasten/search?l=python)\n[![Code Style: black](https://img.shields.io/badge/Code%20Style-Black-blue.svg)](https://github.com/psf/black)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-Yes-blue.svg)](https://github.com/gkapfham/chasten/graphs/commit-activity)\n[![License LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0)\n\n## üéâ Introduction\n\n- **Chasten** is a Python program that uses\n[XPath](https://www.w3schools.com/xml/xpath_syntax.asp) expressions to find\npatterns in the [abstract syntax\ntree](https://docs.python.org/3/library/ast.html) (AST) of a Python program. You\ncan use Chasten to quickly implement your own configurable linting rules,\nwithout having to use a complex AST analysis framework or resorting to imprecise\nregular expressions.\n\n- Do you want to ensure that a Python program has does not have any\ntriple-nested `for` loops inside of `async` functions? Or, do you want to\nconfirm that every function inside your Python program has type annotations and\na docstring comment? **Chasten can help**! It allows you to express these checks\n&mdash; and many other types of analyses as well &mdash; in simple YAML files\nthat contain XPath expressions.\n\n## üòÇ Definitions\n\n- **chasten** (transitive verb) \"to make someone aware of failure or of having\ndone something wrong\", [Cambridge\nDictionary](https://dictionary.cambridge.org/us/dictionary/english/chasten).\n    - **Example Sentence**: \"Her remarks are a gift to me even as they chasten\n    and redirect my efforts to expand the arguments of this book into a larger\n    one.\", [Cambridge English\n    Corpus](https://www.cambridge.org/gb/cambridgeenglish/better-learning-insights/corpus)\n\n- **chasten** (uncountable or singular noun) \"a tool that analyzes the abstract\nsyntax tree of a Python program to detect potential sources of programmer\nmistakes so as to prevent program failure\", [AstuteSource\nDevelopers](https://github.com/AstuteSource).\n    - **Student Sentence**: \"I'm glad that `chasten` reminded me to add\n    docstrings and type annotations to all of the functions in `main.py`. It was\n    easy to see what to fix!\"\n    - **Instructor Sentence**: \"`chasten` makes it easy for me to reliably\n    confirm that student programs have the required coding constructs. It's much\n    better than using regular expressions!\"\n    - **Developer Sentence**: \"Since I was already familiar with XPath\n    expressions, `chasten` made it fun and easy for me to do an automate\n    analysis of a Python codebase that I maintain.\"\n    - **Researcher Sentence**: \"In addition to helping me quickly scan the\n    source code of Python projects, `chasten`'s analysis dashboard lets me\n    effectively explore the data I collect.\"\n\n## üîãFeatures\n\n- ‚ú® Easy-to-configure, automated analysis of a Python program's abstract syntax tree\n- üìÉ Flexible and easy-to-use YAML-based configuration file for describing analyses and checks\n- ü™Ç Automated generation and verification of the YAML configuration files for an analysis\n- üöÄ Configurable saving of analysis results in the JSON, CSV, or SQLite formats\n- üöß Automated integration of result files that arise from multiple runs of the tool\n- üåÑ Interactive results analysis through the use of a locally running datasette server\n- üåé Automated deployment of a datasette server on platforms like Fly or Vercel\n- ü¶ö Detailed console and syslog logging to furnish insights into the tool's behavior\n- üí† Rich command-line interface with robust verification of arguments and options\n- ü§Ø Interactive command-line generation through an easy-to-use terminal user interface\n\n## ‚ö°Ô∏è Requirements\n\n- Python 3.11\n- Chasten leverages numerous Python packages, including notable ones such as:\n    - [Datasette](https://github.com/simonw/datasette): Interactive data analysis dashboards\n    - [Pyastgrep](https://github.com/spookylukey/pyastgrep): XPath-based analysis of a Python program's AST\n    - [Pydantic](https://github.com/pydantic/pydantic): Automated generation and validation of configuration files\n    - [Rich](https://github.com/Textualize/rich): Full-featured formatting and display of text in the terminal\n    - [Trogon](https://github.com/Textualize/trogon): Automated generation of terminal user interfaces for a command-line tool\n    - [Typer](https://github.com/tiangolo/typer): Easy-to-implement and fun-to-use command-line interfaces\n- The developers of Chasten use [Poetry](https://github.com/python-poetry/poetry) for packaging and dependency management\n\n## üîΩ Installation\n\nFollow these steps to install the `chasten` program:\n\n- Install Python 3.11 for your operating system\n- Install [pipx](https://github.com/pypa/pipx) to support program installation in isolated environments\n- Type `pipx install chasten` to install Chasten\n- Type `pipx list` and confirm that Chasten is installed\n- Type `chasten --help` to learn how to use the tool\n\n## ü™Ç Configuration\n\nYou can configure `chasten` with two YAML files, normally called `config.yml`\nand `checks.yml`. Although `chasten` can generate a starting configuration, you\ncan check out the üì¶\n[AstuteSource/chasten-configuration](https://github.com/AstuteSource/chasten-configuration)\nrepository for example(s) of configuration files that setup the tool. Although\nthe `config.yml` file can reference multiple check configuration files, this\nexample shows how to specify a single `checks.yml` file:\n\n```yml\n# chasten configuration\nchasten:\n  # point to a single checks file\n  checks-file:\n    - checks.yml\n```\n\nThe `checks.yml` file must contain one or more checks. What follows is an\nexample of a check configuration file with two checks that respectively find the\nfirst executable line of non-test and test-case functions in a Python project.\nNote that the `pattern` attribute specifies the XPath version 2.0 expression\nthat `chasten` will use to detect the specified type of Python function. You can\ntype `chasten configure validate --config <path to chasten-configuration/\ndirectory>` after filling in `<path to chasten-configuration>` with the\nfully-qualified name of your configuration directory and the tool will confirm\nthat your configuration meets the tool's specification. You can also use the\ncommand `chasten configure create` command to automatically generate a starting\nconfiguration! Typing `chasten configure --help` will explain how to configure\nthe tool.\n\n```yml\nchecks:\n  - name: \"all-non-test-function-definition\"\n    code: \"FUNC\"\n    id: \"FUNC001\"\n    description: \"First executable line of a non-test function, skipping over docstrings and/or comments\"\n    pattern: '//FunctionDef[not(contains(@name, \"test_\"))]/body/Expr[value/Constant]/following-sibling::*[1] | //FunctionDef[not(contains(@name, \"test_\"))]/body[not(Expr/value/Constant)]/*[1]'\n  - name: \"all-test-function-definition\"\n    code: \"FUNC\"\n    id: \"FUNC002\"\n    description: \"First executable line of a test function, skipping over docstrings and/or comments\"\n    pattern: '//FunctionDef[starts-with(@name, \"test_\")]/body/Expr[value/Constant]/following-sibling::*[1] | //AsyncFunctionDef[starts-with(@name, \"test_\")]/body/Expr[value/Constant]/following-sibling::*[1] | //FunctionDef[starts-with(@name, \"test_\")]/body[not(Expr/value/Constant)]/*[1] | //AsyncFunctionDef[starts-with(@name, \"test_\")]/body[not(Expr/value/Constant)]/*[1]'\n    count:\n      min: 1\n      max: 10\n```\n\n## ‚ú® Analysis\n\nSince `chasten` needs a project with Python source code as the input to its\n`analysis` sub-command, you can clone the\nüì¶ [AstuteSource/lazytracker](https://github.com/AstuteSource/lazytracker) and\nüì¶ [AstuteSource/multicounter](https://github.com/AstuteSource/multicounter)\nrepositories that are forks of existing Python projects created for convenient\nanalysis. To incrementally analyze these two projects with `chasten`, you can\ntype the following commands to produce a results JSON file for each project:\n\n- After creating a `subject-data/` directory that contains a `lazytracker/`\ndirectory, you can run the `chasten analyze` command for the `lazytracker`\nprogram:\n\n```shell\nchasten analyze lazytracker \\\n        --config <path to the chasten-configuration/ directory> \\\n        --search-path <path to the lazytracker/ directory> \\\n        --save-directory <path to the subject-data/lazytracker/ directory> \\\n        --save\n ```\n\n- Now you can scan the output to confirm that, for instance, `chasten` finds `6`\ntest functions in the `lazytracker` project. If you look in the\n`subject-data/lazytracker` directory you will find a JSON file with a name like\n`chasten-results-lazytracker-20230823162341-4c23fc443a6b4c4aa09886f1ecb96e9f.json`.\nRunning `chasten` on this program more than once will produce a new results file\nwith a different timestamp (i.e., `20230823162341`) and unique identifier (i.e.,\n`4c23fc443a6b4c4aa09886f1ecb96e9f`) in its name, thus ensuring that you do not\naccidentally write over your prior results when using `--save`.\n\n- After creating a `multicounter/` directory in the existing `subject-data/`\ndirectory, you can run the `chasten analyze` command for the `multicounter`\nprogram:\n\n```shell\nchasten analyze multicounter \\\n        --config <path to the chasten-configuration/ directory> \\\n        --search-path <path to the multicounter/ directory> \\\n        --save-directory <path to the subject-data/lazytracker/ directory> \\\n        --save\n ```\n\n- Now you can scan the output to confirm that, as an example, `chasten` finds\n`10` test functions in the `multicounter` project. If you look in the\n`subject-data/lazytracker` directory you will find a JSON file with a name like\n`chasten-results-multicounter-20230821171712-5c52f2f1b61b4cce97624cc34cb39d4f.json`\nand name components that are similar to the JSON file created for the\n`multicounter` program.\n\n- Since the `all-test-function-definition` check specifies that the program must\nhave between `1` and `10` tests you will notice that this check passes for both\n`lazytracker` and `multicounter`. This means that `chasten` returns a `0` error\ncode to communicate to your operating system that the check passed.\n\n- You can learn more about how to use the `analyze` sub-command by typing\n`chasten analyze --help`. For instance, `chasten` supports the `--check-include`\nand `--check-exclude` options that allow you to respectively include and exclude\nspecific checks according to fuzzy matching rules that you can specify for any\nof a check's attributes specified in the `checks.yml` file.\n\n## üöß Integration\n\nAfter running `chasten` on the `lazytracker` and `multicounter` programs you can\nintegrate their individual JSON files into a single JSON file, related CSV\nfiles, and a SQLite database. Once you have made an `integrated-data/`\ndirectory, you can type this command to perform the integration:\n\n```shell\nchasten integrate all-programs \\\n        <path to subject-data>/**/*.json \\\n        --save-directory <path to the integrated-data/ directory>\n```\n\nThis command will produce a directory like\n`chasten-flattened-csvs-sqlite-db-all-programs-20230823171016-2061b524276b4299b04359ba30452923/`\nthat contains a SQLite database called `chasten.db` and a `csv/` directory with\nCSV files that correspond to each of the tables inside of the database.\n\nYou can learn more about the `integrate` sub-command by typing `chasten\nintegrate --help`.\n\n## üåÑ Results\n\nIf you want to create an interactive analysis dashboard that uses üì¶\n[simonw/datasette](https://github.com/simonw/datasette) you can run `chasten\ndatasette-serve <path containing integrated results>/chasten.db --port 8001`.\nNow you can use the dashboard in your web browser to analyze the results while\nyou study the source code for these projects with your editor! Examining the\nresults will reveal that `chasten`, through its use of üì¶\n[spookylukey/pyastgrep](https://github.com/spookylukey/pyastgrep), correctly\nuses the XPath expression for `all-test-function-definition` to find the first\nline of executable source code inside of each test, skipping over a function's\ndocstring and leading comments.\n\nFor the `lazytracker` program you will notice that `chasten` reports that there\nare `6` test cases even though `pytest` only finds and runs `5` tests. This is\ndue to the fact that `tests/test_tracked.py` test suite in `lazytracker`\ncontains a function starting with `test_` inside of another function starting\nwith `test_`. This example illustrates the limitations of static analysis with\n`chasten`! Even though the tool correctly detected all of the \"test functions\",\nthe nesting of the functions in the test suite means that `pytest` will run the\nouter `test_` function and use the inner `test_` function for testing purposes.\n\nWith that said, `chasten` correctly finds each of the tests for the\n`multicounter` project. You can follow each of the previous steps in this\ndocument to apply `chasten` to your own Python program!\n\n## üåé Deployment\n\nIf you want to make your `chasten.db` publicly available for everyone to study,\nyou can use the `chasten datasette-publish` sub-command. As long as you have\nfollowed the installation instructions for üì¶\n[simonw/datasette-publish-fly](https://github.com/simonw/datasette-publish-fly)\nand üì¶\n[simonw/datasette-publish-vercel](https://github.com/simonw/datasette-publish-vercel),\nyou can use the plugins to deploy a public `datasette` server that hosts your\n`chasten.db`. For instance, running the command `chasten datasette-publish <path\ncontaining integrated results>/chasten.db --platform vercel` will publish the\nresults from running `chasten` on `lazytracker` and `multicounter` to the\n[Vercel](https://vercel.com/) platform.\n\nImportantly, the use of the `chasten datasette-publish` command with the\n`--platform vercel` option requires you to have previously followed the\ninstructions for the `datasette-publish-vercel` plugin to install the `vercel`\ncommand-line tool. This is necessary because, although\n`datasette-publish-vercel` is one of `chasten`'s dependencies neither `chasten`\nnor `datasette-publish-vercel` provide the `vercel` tool even though they use\nit. You must take similar steps before publishing your database to\n[Fly](https://fly.io/)!\n\n## ü§Ø Interaction\n\nEven though `chasten` is a command-line application, you create interactively\ncreate the tool's command-line arguments and options through a terminal user\ninterface (TUI). To use TUI-based way to create a complete command-line for\n`chasten` you can type the command `chasten interact`.\n\n## ü§ó Learning\n\n- **Curious about the nodes that are available in a Python program's AST?**\n    - [Abstract Syntax Tree\n    documentation](https://docs.python.org/3/library/ast.html) introduces the\n    nodes of a Python AST\n    - [Green Tea\n    Snakes](https://greentreesnakes.readthedocs.io/en/latest/index.html)\n    provides the \"missing Python AST docs\"\n    - [Textual AST View](https://github.com/davep/textual-astview) provides a\n    terminal-based tool for browsing a Python program's AST\n- **Want to learn more about how to write XPath expressions for a Python AST?**\n    - [Pyastgrep](https://github.com/spookylukey/pyastgrep) offers examples of\n    XPath expressions for querying a Python program's AST\n    - [XPath Documentation](https://www.w3schools.com/xml/xpath_syntax.asp)\n    describes how to write XPath expressions\n    - [XPath Axes](https://www.w3schools.com/xml/xpath_axes.asp) summaries the\n    ways that XPath axes relate a note to other nodes\n- **Interested in exploring other approaches to querying source code?**\n    - [srcML](https://www.srcml.org/) supports XPath-based querying of programs\n    implemented in C, C#, C++, and Java\n    - [Treesitter](https://tree-sitter.github.io/tree-sitter/) provides a\n    general-purpose approach to modelling and querying source code\n    - [Python Treesitter](https://github.com/tree-sitter/py-tree-sitter) offers\n    a Python language bindings for to parsing and querying with Treesitter\n\n## üßóImprovement\n\n- Found a bug or have a feature that the development team should implement?\n[Raise an issue](https://github.com/AstuteSource/chasten/issues)!\n- Interesting in learning more about tool usage details? [Check the\nwiki](https://github.com/AstuteSource/chasten/wiki)!\n- Want to discuss ways to use the tool? [Participate in\ndiscussions](https://github.com/AstuteSource/chasten/discussions/2)!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"chastenwiki.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"darkly","title":"Chasten Documentation","subtitle":"Welcome! This is the official documentation for Chasten."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}